@import "~@angular/material/theming";

// 青
$blue: (
  50: #0e0d6a,
  100: #0e0d6a,
  200: #0e0d6a,
  300: #0e0d6a,
  400: #0e0d6a,
  500: #0e0d6a,
  600: #0e0d6a,
  700: #0e0d6a,
  800: #0e0d6a,
  900: #0e0d6a,
  A100: #0e0d6a,
  A200: #0e0d6a,
  A400: #0e0d6a,
  A700: #0e0d6a,
  contrast: (
    50: white,
    100: white,
    200: white,
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: white,
    A200: white,
    A400: white,
    A700: white,
  ),
);

// 黒
$black: #2c2c2c;
// 白
$white: #fff;
// 標準フォント（黒）
$on-black: mat-color($mat-blue-gray, 700);
// 標準フォント（白）
$on-white: mat-color($mat-gray, A100);
// 正常
$success: mat-color($mat-green, 600);
$on-success: $on-white;
// 警告
$warn: mat-color($mat-amber, 300);
$on-warn: $on-black;
$warn-variant-light: mat-color($mat-amber, 200);
// 異常
$failure: mat-color($mat-red, 600);
$on-failure: $on-white;
// 非活性
$disabled: mat-color($mat-gray, 300);
$on-disabled: mat-color($mat-gray, 200);
// コンテンツ背景色
$surface: mat-color($mat-gray, A100);
$on-surface: $on-black;

$color-map: (
  brand: (
    color: #0e0c6a,
    on: $white,
    focus: (
      color: #8e8db9,
      on: $black,
    ),
  ),
  primary: (
    color: #06cfcf,
    on: $black,
    focus: (
      color: #6ee3e3,
      on: $black,
    ),
  ),
  secondary: (
    color: #ffd705,
    on: $black,
    focus: (
      color: #ffe768,
      on: $black,
    ),
  ),
);

$color-map-v2: (
  default: (
    base: (
      #111,
      #333,
      #555,
      #777,
      #999,
    ),
    on: (
      $white,
      $white,
      $white,
      $black,
      $black,
    ),
    default: 3,
  ),
  white: (
    base: (
      #fff,
      #c1c1c1,
      #838383,
      #616161,
      #3c3c3c,
      #313131,
      #282828,
    ),
    on: (
      $black,
      $black,
      $black,
      $white,
      $white,
      $white,
      $white,
    ),
    default: 1,
  ),
  black: (
    base: (
      #1a1a1a,
      #484848,
      #767676,
      #a3a3a3,
      #d1d1d1,
      #e9e9e9,
      #f3f3f3,
    ),
    on: (
      $white,
      $white,
      $white,
      $black,
      $black,
      $black,
      $black,
    ),
    default: 1,
  ),
  grey-light: (
    base: (
      #eceff2,
      #b6bec4,
      #96a0a8,
      #6c757d,
      #454d56,
      #2a3238,
      #22272c,
    ),
    on: (
      $black,
      $black,
      $black,
      $white,
      $white,
      $white,
      $white,
    ),
    default: 3,
  ),
  grey-dark: (
    base: (
      #23292e,
      #3e454d,
      #566069,
      #838c94,
      #b1b8c0,
      #d9dee4,
      #edf0f3,
    ),
    on: (
      $white,
      $white,
      $white,
      $black,
      $black,
      $black,
      $black,
    ),
    default: 3,
  ),
  warn: (
    base: (
      #4c1c00,
      #7f2e00,
      #b74300,
      #ff5e00,
      #ffa570,
      #ffebe0,
    ),
    on: (
      $white,
      $white,
      $white,
      $black,
      $black,
      $black,
    ),
    default: 4,
  ),
  action: (
    base: (
      #05285d,
      #07429b,
      #0d5eda,
      #5992e7,
      #a0c0f1,
      #e6effb,
    ),
    action: (
      _00: (
        base: (
          color: #0d5eda,
          on: $white,
        ),
        hover: (
          color: #d8e5f9,
          on: #0d5eda,
        ),
        active: (
          color: #6d9fea,
          on: #0d5eda,
        ),
      ),
    ),
    on: (
      $white,
      $white,
      $white,
      $black,
      $black,
      $black,
    ),
    default: 3,
  ),
);

@function p-color-level($color, $level) {
  @if ($level == null) {
    $level: map-get(map-get($color-map-v2, $color), default);
  }
  @return $level;
}

@function p-color-shift($color, $level) {
  $on: nth(map-get(map-get($color-map-v2, $color), on), $level);
  $shift: 0;
  @if ($on == $white) {
    $shift: 1;
  } @else {
    $shift: -1;
  }
  @return $shift;
}

@function kaleid-p-color-shift($color, $level) {
  $on: nth(map-get(map-get($color-map-v2, $color), on), $level);
  $on_l1: nth(map-get(map-get($color-map-v2, $color), on), 1);
  $shift: 0;
  @if ($on_l1 == $white) {
    @if ($on == $white) {
      $shift: 1;
    } @else {
      $shift: -1;
    }
  } @else {
    @if ($on == $white) {
      $shift: -1;
    } @else {
      $shift: 1;
    }
  }
  @return $shift;
}

@mixin font-color($color) {
  color: map-get(map-get($color-map, $color), color);
}

@mixin font-color-v2($color: default, $level: null) {
  $level: p-color-level($color, $level);
  $shift: p-color-shift($color, $level);
  $shift-l1: $level + $shift;
  $shift-l2: $level + $shift + $shift;

  color: nth(map-get(map-get($color-map-v2, $color), base), $level);
  &:hover {
    color: nth(map-get(map-get($color-map-v2, $color), base), $shift-l1);
  }
  &.active {
    color: nth(map-get(map-get($color-map-v2, $color), base), $shift-l2);
  }
}

@mixin kaleid-font-color($color: default, $level: null) {
  @if (map-get($color-map-v2, $color) == null) {
    @error "kaleid-font-color() のcolorが存在しません。";
  }

  color: nth(
    map-get(map-get($color-map-v2, $color), base),
    p-color-level($color, $level)
  );
}

@mixin kaleid-font-color-action($color: default, $tone: null) {
  @if (map-get($color-map-v2, $color) == null) {
    @error "kaleid-font-color-action() のcolorが存在しません。";
  } @else if (map-get(map-get($color-map-v2, $color), action) == null) {
    @error "kaleid-font-color-action() のactionが存在しません。";
  } @else if
    (map-get(map-get(map-get($color-map-v2, $color), action), $tone) == null)
  {
    @error "kaleid-font-color-action() のtoneが存在しません。";
  }

  $action-map: map-get(map-get(map-get($color-map-v2, $color), action), $tone);

  color: map-get(map-get($action-map, base), color);
  &:hover {
    color: map-get(map-get($action-map, hover), color);
  }
  &.active {
    color: map-get(map-get($action-map, active), color);
  }
}

@mixin background-color($background, $alpha: 1) {
  color: map-get(map-get($color-map, $background), on);
  background-color: rgba(
    map-get(map-get($color-map, $background), color),
    $alpha
  );
}

@mixin kaleid-background-color($color: default, $alpha: 1, $level: null) {
  @if (map-get($color-map-v2, $color) == null) {
    @error "kaleid-background-color() のcolorが存在しません。";
  }

  background-color: rgba(
    nth(
      map-get(map-get($color-map-v2, $color), base),
      p-color-level($color, $level)
    ),
    $alpha
  );
}

@mixin kaleid-background-color-action($color: action, $alpha: 1, $tone: null) {
  @if (map-get($color-map-v2, $color) == null) {
    @error "kaleid-background-color-action() のcolorが存在しません。";
  } @else if (map-get(map-get($color-map-v2, $color), action) == null) {
    @error "kaleid-background-color-action() のactionが存在しません。";
  } @else if
    (map-get(map-get(map-get($color-map-v2, $color), action), $tone) == null)
  {
    @error "kaleid-background-color-action() のtoneが存在しません。";
  }

  $action-map: map-get(map-get(map-get($color-map-v2, $color), action), $tone);

  background-color: rgba(map-get(map-get($action-map, base), color), $alpha);
  &:hover {
    background-color: rgba(map-get(map-get($action-map, hover), color), $alpha);
  }
  &.active {
    background-color: rgba(
      map-get(map-get($action-map, active), color),
      $alpha
    );
  }
}

@mixin border-color($color, $px: 1px, $style: solid, $suffix: null, $alpha: 1) {
  @if $suffix == top or $suffix == bottom or $suffix == left or $suffix == right
  {
    border-#{$suffix}: $px
      $style
      rgba(map-get(map-get($color-map, $color), color), $alpha);
  } @else if $suffix == null {
    border: $px
      $style
      rgba(map-get(map-get($color-map, $color), color), $alpha);
  }
}

@mixin kaleid-border-color(
  $emphasis: m,
  $style: solid,
  $suffix: null,
  $color: null,
  $level: null
) {
  $border-color: null;
  @if ($color == null and $level != null) {
    @error "kaleid-border-color() のcolorがnullの場合はlevelが指定できません。";
  } @else if ($color != null) {
    $level: p-color-level($color, $level);
    $border-color: 1px
      $style
      nth(map-get(map-get($color-map-v2, $color), base), $level);
  } @else if($emphasis == vh) {
    $border-color: 1px
      $style
      nth(map-get(map-get($color-map-v2, grey-dark), base), 3);
  } @else if($emphasis == h) {
    $border-color: 1px
      $style
      nth(map-get(map-get($color-map-v2, grey-dark), base), 4);
  } @else if($emphasis == m) {
    $border-color: 1px
      $style
      nth(map-get(map-get($color-map-v2, grey-dark), base), 5);
  } @else if($emphasis == l) {
    $border-color: 1px
      $style
      nth(map-get(map-get($color-map-v2, grey-dark), base), 6);
  }

  @if $suffix == top or $suffix == bottom or $suffix == left or $suffix == right
  {
    border-#{$suffix}: $border-color;
  } @else if $suffix == null {
    border: $border-color;
  }
}

@mixin background-color-focus($background) {
  @include background-color($background);
  &:focus,
  &:hover {
    $fmap: map-get(map-get($color-map, $background), focus);
    color: map-get($fmap, on);
    background-color: map-get($fmap, color);
  }
}
